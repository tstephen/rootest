// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.knowprocess.rootest.model;

import com.knowprocess.rootest.model.Foo;
import com.knowprocess.rootest.model.FooDataOnDemand;
import com.knowprocess.rootest.model.FooEnumType;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect FooDataOnDemand_Roo_DataOnDemand {
    
    declare @type: FooDataOnDemand: @Component;
    
    private Random FooDataOnDemand.rnd = new SecureRandom();
    
    private List<Foo> FooDataOnDemand.data;
    
    public Foo FooDataOnDemand.getNewTransientFoo(int index) {
        Foo obj = new Foo();
        setBoolField(obj, index);
        setDateField(obj, index);
        setEnumField(obj, index);
        setF1(obj, index);
        setF2(obj, index);
        setFloatField(obj, index);
        setIntField(obj, index);
        setLobField(obj, index);
        setMultiEnumField(obj, index);
        return obj;
    }
    
    public void FooDataOnDemand.setBoolField(Foo obj, int index) {
        Boolean boolField = Boolean.TRUE;
        obj.setBoolField(boolField);
    }
    
    public void FooDataOnDemand.setDateField(Foo obj, int index) {
        Date dateField = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateField(dateField);
    }
    
    public void FooDataOnDemand.setEnumField(Foo obj, int index) {
        FooEnumType enumField = FooEnumType.class.getEnumConstants()[0];
        obj.setEnumField(enumField);
    }
    
    public void FooDataOnDemand.setF1(Foo obj, int index) {
        String f1 = "f1_" + index;
        obj.setF1(f1);
    }
    
    public void FooDataOnDemand.setF2(Foo obj, int index) {
        String f2 = "f2_" + index;
        obj.setF2(f2);
    }
    
    public void FooDataOnDemand.setFloatField(Foo obj, int index) {
        float floatField = new Integer(index).floatValue();
        obj.setFloatField(floatField);
    }
    
    public void FooDataOnDemand.setIntField(Foo obj, int index) {
        int intField = index;
        obj.setIntField(intField);
    }
    
    public void FooDataOnDemand.setLobField(Foo obj, int index) {
        String lobField = "lobField_" + index;
        if (lobField.length() > 4000) {
            lobField = lobField.substring(0, 4000);
        }
        obj.setLobField(lobField);
    }
    
    public void FooDataOnDemand.setMultiEnumField(Foo obj, int index) {
        FooEnumType multiEnumField = FooEnumType.class.getEnumConstants()[0];
        obj.setMultiEnumField(multiEnumField);
    }
    
    public Foo FooDataOnDemand.getSpecificFoo(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Foo obj = data.get(index);
        Long id = obj.getId();
        return Foo.findFoo(id);
    }
    
    public Foo FooDataOnDemand.getRandomFoo() {
        init();
        Foo obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Foo.findFoo(id);
    }
    
    public boolean FooDataOnDemand.modifyFoo(Foo obj) {
        return false;
    }
    
    public void FooDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Foo.findFooEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Foo' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Foo>();
        for (int i = 0; i < 10; i++) {
            Foo obj = getNewTransientFoo(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
